How to create a java project?
File===>New=====>Java Project

How to create a java class within the project?
*Right click on the project=====>New====>class
*In the dialog box for creating new Java class dont mention any package name ( We will discuss about the 
 packages later during our session) by default the package name is same as that of the project name.
 Delete the text which is shown for the package name.
* Mention the class name.Please follow the convention of naming a class.
* select the checkbox to have main method in the class created.
* In the code editor, just write syso and press ctrl+spacebar.
* Right click on the code editor, Run as ====>Java application.
* To save the file content press ctrl+s.

String[] args / String args[] both are correct.

class hello{
   public static void main(String args[]){
   System.out.print("Hello");
   }
  }

The code compiles and shows the output as Hello.
But we should follow the convention of class naming.So here we mentioned hello where H should be in uppercase.

class Hello{
   public static void main(string args[]){
   System.out.print("Hello");
   }
  }
The code will not compile because we are writing the String class as string.    

class Hello{
   public static void main(String str[]){
   System.out.print("Hello");
   }
  }
The code compiles and shows the output as Hello.

class Hello{
   public static void main(String str[]){
   System.out.print("Hello")
   }
  }
The code will not compile because we missed statement ending with ;.

class Data {
   public static void main(String args[]){
      int num=10;
    }
 }

8 bits=1 byte 

The following are 8 primitive datatypes:
* char which can store a character
  char alpha='A';
  char alpha='$';
  char alpha='1';
  For character storage we have 2 bytes of memory
* byte 1 byte   
* short 2 bytes 
* int   4 bytes
* long  8 bytes
* float 4 bytes
* double 8 bytes
* boolean => true/false 1 bit
---------------------------------------------------------------------------------------------------
// A single line comment
/* This is a demo 
   of multiple lines comment */

long l=100000;
// In the above line int value 100000 is assigned to a long variable l which is possible because int is 
// having a size of 4 bytes which can be stored in 8 bytes of memory which for long datatype.

Long var=100000L;
// We are assigning a long value to a long variable.


float var=12.34;
// The above line shows compilation error because 12.34 is a double value which is assigned to a float variable
// The size of float variable is of 4 bytes which is lesser than double which is of 8 bytes.

float var=12.34f;
float var2=12.34F;
// In the above 2 lines as the value is with the suffix f or F. Which depicts that the value in RHS is of
  float type which is assigned to a float variable.


float var3=20;
// The above line will compile without an error becuase both float and int are having the same size of 4bytes.
 // So 20 is an int value which is stored or assigned in a variable of float type.


double d=12.34;
// The above line is fine as 12.34 is a double value which is assigned to a double variable.

double d=10;
// The above line is fine as we are assigning an int value to a double variable. int is having a size of
// 4 bytes which can be assigned to a double variable which is having a size of 8 bytes.


char ch=65;
// The above line will compile without any error as int can be assigned to a char datatype.

---------------------------------------------------------------------------------------------------------------

//This is my demo of primitive data type
public class Data1 {

	public static void main(String[] args) {
		char alpha='a';
		int num=10;
		//float f=10.25; here we are assigning a double value to a float variable. 10.25 is a double value which is assigned to a float variable f 
		double d=10.25; // here we dont have any compilation error because the 10.25 which is double value is assigned to a double variable
        float var=10.25f;
          var=10.25F;
         // In line 11 we have declared and initialise a float variable var with a float value as the value 10.25 is with the suffix f
        // In line 12 the suffix is F
         boolean b=true;
         System.out.println(alpha);
         System.out.println(num);
         System.out.println(d);
         System.out.println(var);
         System.out.println(b);
         alpha=65;
         System.out.println(alpha);
         alpha=97;
         System.out.println(alpha);
         
	}

}
---------------------------------------------------------------------------------------------------------------
The variable needs to be initialised before the access. Otherwise it will be a compilation error.

class Data2 {

	public static void main(String[] args) {
		int num;
		System.out.println(num);

	}

}

//The local variable num may not have been initialized
// The above code is with error because we have not initialised num are we are trying to display the
// value of num.

class Data3 {

	public static void main(String[] args) {
		int num=10;
		System.out.println(num);

	}

}

class Data4 {

	public static void main(String[] args) {
		int num;
                num=10;
		System.out.println(num);

	}

}

-------------------------------------------------------------------------------------------------------------


class Demo {
	public static void main(String[] args) {
		int quantity;
		float totalCost = 10 * quantity; // error on this line
		System.out.println(totalCost);
	}
}


public class Data5 {

	public static void main(String[] args) {
		/* char ch=65;
		char ch2=66;
		char ch3=67; */
		char ch=65,ch2=66,ch3=67;
		System.out.println(ch+" "+((int)ch));
		System.out.println(ch2+" "+((int)ch2));
		System.out.println(ch3+" "+((int)ch3));
	}

}


public class Data6 {
public static void main(String[] args) {
       float f=12.35535365325546664567777344f; // 6 places of decimal
       System.out.println(f);
       double d=12.35535365325546664567777344; // 15 places od decimal
       System.out.println(d);
	}

}
--------------------------------------------------------------------------------------------------
 Non-primitive data types include classes, arrays, interfaces etc.

public class Data7 {

	public static void main(String[] args) {
		String str="Welcome";
		System.out.println(str);
		int num=10;
		System.out.println(num);

	}

}
----------------------------------------------------------------
We have an item , if the item price is more than 1000 we give a discount of 5%.
= is assignment operator
LHS=RHS
// RHS is assigned to LHS variable
class Item {
    public static void main(String arrgs[]){
     String itemName="Shirt";
     int itemPrice=1500;
     int discount=5;
     if(itemPrice>1000){
       itemPrice=itemPrice-(itemPrice*5/100);
     } // end of if
     System.out.println("The item price is "+itemPrice);

   } // end of main
 } // end of class


public class Calculator {

	public static void main(String[] args) {
		int num1=10;
		int num2=20;
		int result=num1+num2;
		System.out.println(result);
		result=num1-num2;
		System.out.println(result);
		result=num1*num2;
		System.out.println(result);
		result=num2/num1;  //quotient
		System.out.println(result);
		result=num2%num1;  //remainder
		System.out.println(result);
		
	}

}



-----------------------------------------------------------
operators and operands ===> operators are applied on operands

   num1+num2;
   + is an operator
   num1 and num2 as operands

// post increment
 class OperatorUnaryDemo1{
      public static void main(String[] args) {
       int num=10;
       num++;// num=num+1;
       System.out.println(num); //11
      }
   }


// pre increment
 class OperatorUnaryDemo2{
      public static void main(String[] args) {
       int num=10;
       ++num; // num=num+1;
       System.out.println(num); //11
      }
   }



// post increment
 class OperatorUnaryDemo3{
      public static void main(String[] args) {
       int num=10;
       int result=num++;
       // result=num;
      // num=num+1;
        System.out.println(result); //10
        System.out.println(num); //11
      }
   }


// pre increment
 class OperatorUnaryDemo4{
      public static void main(String[] args) {
       int num=10;
       int result=++num;
       // num=num+1;
       // result=num;
       System.out.println(result);  //11
       System.out.println(num); //11
      }
   }


// logical negation
 class OperatorUnaryDemo5{
      public static void main(String[] args) {
       boolean b1=true;
       boolean b2=false;
       System.out.println(b1);  //true
       System.out.println(b2); //false
       System.out.println(!b1);  //false
       System.out.println(!b2); //true
      }
   }

 class OperatorUnaryDemo6{
public static void main(String args[]) {
	int numOne = 10;
	int numTwo = 5;
	boolean isTrue = true;
	System.out.println(numOne++ + " " + ++numOne); //Output will be 10 12
	System.out.println(numTwo-- + " " + --numTwo); //Output will be 5 3
	System.out.println(!isTrue + " " + ~numOne); //Output will be false -13
}

}

class RelationalDemo1 {
public static void main(String args[]) {
	int num1=10;
        int num2=20;     
        int num3=5;
        int num4=10;
        System.out.println(num1==num2);  // false
        System.out.println(num1==num4);   // true       
        System.out.println(num1>num3);    // true 
        System.out.println(num1<num3);    // false
        System.out.println(num1>=num4);   // true
        System.out.println(num1>=num3);   //true
        System.out.println(num1!=num3);    //true
        System.out.println(num1!=num4);    // false
     }





}


class LogicalDemo1 {
public static void main(String args[]) {
	int num1=10;
        int num2=20;     
        int num3=5;
        int num4=10;
        System.out.println(num1==num2 && num1==num4);   //false && true ===> false
        System.out.println(num1==num4 && num1>num3);   // true  && true ====> true       
        System.out.println(num1>num3 || num1==num2);    // true || false====> true 
       
     }

}

class TernaryOperator1 {

public static void main(String args[]) {
	int numOne = 10;
	int numTwo = 5;
	int min = (numOne < numTwo) ? numOne : numTwo;
	System.out.println(min); //Output will be 5
}

}



class TernaryOperator2 {

public static void main(String args[]) {
	int numOne = 5;
	int numTwo = 10;
	int min = (numOne < numTwo) ? numOne : numTwo;
	System.out.println(min); //Output will be 5
}

}


if marks is more than or equal to 80 ===> Good score
otherwise Bad score

class TernaryOperator3 {
public static void main(String args[]) {
	int marks = 80;
	String remarks=(marks>=80)? "Good score": "Bad score";
	System.out.println((marks>=80)? "Good score": "Bad score");
	System.out.println(remarks); 
}

}
-----------------------------------------------------------------------------------------------------------
Exercise1 : Depending on the item price calculate the price of the item after giving a discount.

   if price is >=10000 discount will be 10 %
   if price is >=1000  discount will be 5%
   otherwise not discount in the price.

  class Exercise1 {
    public static void main(String[] args) {
    // write the code
   }
 
  }

[Hint: (condition)?true:(conditon)?true:false ]

Exercise2 : Depending upon marks , assign a grade for the student.

  if marks>=80   grade will be A
  if marks>=60   grade will be B
  otherwise grade is C.
 

  class Exercise2 {
    public static void main(String[] args) {
   // write the code
   }
 
  }

---------------------------------------------------------------------------------------------------------------
Assignment operator

  class AssignmentOperator1 {

   public static void main(String[] args) {
      int num;
      num=10;  // We are assigning a value of 10 to the variable num
      int num2;
      num2=num; // Whatever num is having that is copied to num2
      System.out.println(num);
      System.out.println(num2);
   }

   }
--------------------------------------------------------------------------------------
Declare a variable num and add 5 to that variable's value

 class AssignmentOperator2 {

   public static void main(String[] args) {
      int num;
      num=10;  
      System.out.println(num);
      //num=num+5;
        num+=5;  // if the value changed is assigned to the same variable after performing arithmetic operation
      System.out.println(num);
   }

   }
-----------------------------------------------------------------------------------------------------------
class PrecedenceDemo1{
    public static void main(String args[]){
    int result=10+2-5;
    System.out.println(result); //7
   }


}

class PrecedenceDemo2{
    public static void main(String args[]){
    int result=10-2+5;
    System.out.println(result); //13
   }


}


class PrecedenceDemo3{
    public static void main(String args[]){
    int result=10-2+5*4;   //  1) 10-2+20;   2) 8+20  3) 28
    System.out.println(result); //28
   }


}


class PrecedenceDemo4{
    public static void main(String args[]){
    int result=10-(2+5)*4;   //  1) 10-7*4     2) 10-28
    System.out.println(result); //
   }


}


class ConversionDemo1{
 public static void main(String args[]){
    int num=10;
    double num2=num; // The num which is of int type and size of 4 bytes can be assigned to a type double which is having 8 bytes
    
   }
}

class CastingDemo1{
 public static void main(String args[]){
   double num=10.45;
    int num2=num; // We get a compilation error because we are trying to assign the value of a variable which having the higher
    // datatype size as compared to the variable where the value is assigned
   }
}

// Type mismatch: cannot convert from double to int



class CastingDemo2{
 public static void main(String args[]){
   double num=10.45;
    int num2=(int)num; // The code will compile and show us the output as we forced the datatype to
    // get converted from double to int
   System.out.println(num2);
   }
}


class Expression1 {

 public static void main(String args[]){
        int num1=10;
        double num2=10.23;
        double result=num2+num1; // num1 is of int type and size of 4 bytes and
       // num2 is of double type and size of 8 bytes
       // so here we have double of bigger sizw and int of smaller size so
       // the int type is converted into double type implicitly.
        System.out.println(result);// 20.23
        byte b=1;
        result=num1+num2+b;
       // here both b and num1 gets converted to double type because the 
       // size of double is more than byte and int
       System.out.println(result);  // 21.23
     }


}


 class Expression2 {

    public static void main(String args[]){
     int num1=5;
     int num2=2;
     int result1;
     double result2;
     result1=num1/num2;
     System.out.println(result1); //2 
     result2=num1/num2;
     System.out.println(result2);  //2.5
     

    }


 }